#!/usr/bin/python

from __future__ import print_function

import sys
import subprocess
import serial
import argparse
import time 


def warning(*objs):
    print(*objs, file = sys.stderr)

START_BYTE      = "\xfa"
STOP_BYTE       = "\xfb"

DEVICE_READY    = "\xfa\x03\x01\x00\x00\x00\xfb"
DEVICE_POWEROFF = "\xfa\x03\x03\x01\x01\x14\xfb"

ACK             = "\xfa\x30\x00\x00\x00\x00\xfb"
THERMAL_STATUS  = "\xfa\x03\x08\x00\x00\x00\xfb"
FAN_STOP        = "\xfa\x02\x00\x00\x00\x00\xfb"
FAN_HALF        = "\xfa\x02\x00\x01\x00\x00\xfb"
FAN_FULL        = "\xfa\x02\x00\x02\x00\x00\xfb"
POWER_LED_ON    = "\xfa\x03\x06\x01\x00\x01\xfb"
POWER_LED_OFF   = "\xfa\x03\x06\x00\x00\x01\xfb"
POWER_LED_FLASH = "\xfa\x03\x06\x02\x00\x01\xfb"


THERMAL_TABLE   = (
	116, 115, 114, 113, 112, 111, 110, 109,
	108, 107, 106, 105, 104, 103, 102, 101,
	100,  99,  98,  97,  96,  95,  94,  93,
	 92,  91,  90,  89,  88,  87,  86,  85,
	 84,  83,  82,  81,  80,  79,  78,  77, 
	 76,  75,  74,  73,  72,  71,  70,  69,
	 68,  67,  66,  65,  65,  64,  63,  62,
	 62,  61,  61,  60,  59,  58,  58,  57, 
	 56,  56,  55,  54,  54,  53,  52,  52,
	 51,  51,  50,  49,  49,  48,  48,  47,
	 47,  46,  46,  45,  44,  44,  43,  43,
	 42,  42,  41,  41,  40,  40,  39,  39,
	 39,  38,  38,  37,  37,  36,  36,  35,
	 35,  34,  34,  33,  33,  33,  32,  32,
	 31,  31,  30,  30,  30,  29,  29,  28,
	 28,  27,  27,  27,  27,  26,  25,  25,
	 25,  24,  24,  23,  23,  37,  27,  27,
	 25,  25,  25,  24,  24,  23,  23,  22,
	 22,  22,  21,  21,  20,  20,  20,  19,
	 19,  18,  18,  18,  17,  17,  16,  16,
	 16,  15,  15,  14,  14,  14,  13,  13,
	 12,  12,  12,  11,  11,  10,  10,   9, 
	  9,   9,   8,   8,   7,   7,   7,   6,
	  6,   5,   5,   4,   4,   4,   3,   3,
	  2,   2,   1,   1,   0,   0,   0,   0,
	  0,   0,   0,   0
)


THERMAL_THRESHOLD_LOW  = 30
THERMAL_THRESHOLD_HIGH = 50
THERMAL_HYSTERESIS = 3

def mcu_communicate(cmd):
	with serial.Serial("/dev/ttyS1", 115200, 8, "N", 1, 1) as serial_port:
		if not cmd[0] == START_BYTE \
				or not cmd[-1] == STOP_BYTE:
			warning('Malformed command!')
			return '\x00' * 7

		serial_port.write(cmd)
		serial_port.flush()

		retval = ''
		while True:
			buf  = serial_port.read(7)
			if len(buf) == 0:
				break

			retval += buf

		if not retval[-7:] == ACK:
			warning('MCU did not respond with ACK')
			return '\x00' * 7
		else: 
			return retval[:-7]


def ready():
	mcu_communicate(DEVICE_READY)

def fancontrol():
	currentFanSpeed = None

	while True:
		temperatures = []

		for hdd in [1, 2]:
			try:
				dev  = subprocess.check_output(['find', '/sys/devices/platform/ocp@f1000000/f1080000.sata/ata{}/'.format(hdd), '-regex', '.*/sd[a-z]$', '-printf', '%f'])
				hdd_temp = int(subprocess.check_output(['hddtemp', '-n', '/dev/{}'.format(dev)]))
				print('HDD {} temperature is {}\xf8C' . format(hdd, hdd_temp))
				temperatures.append( hdd_temp )
			except subprocess.CalledProcessError as e:
				warning("Could not determine temperature for HDD {}, assuming worst case".format(hdd))
				temperatures.append( 99 )

		retval = mcu_communicate(THERMAL_STATUS)
		if retval[0]  == START_BYTE \
				and retval[1]  == "\x03" \
				and retval[2]  == "\x08" \
				and retval[-1] == STOP_BYTE:
			cpu_temp = THERMAL_TABLE[ord(retval[5])]
			print('CPU temperature is {}\xf8C'.format(cpu_temp))
			temperatures.append( cpu_temp )
		else:
			warning('Could not determine CPU temperature, assuming worst case')
			temperatures.append( 99 )

		max_temperature = max(temperatures)

		if max_temperature < THERMAL_THRESHOLD_LOW - THERMAL_HYSTERESIS \
				and not currentFanSpeed == FAN_STOP:
			currentFanSpeed = FAN_STOP
			mcu_communicate(FAN_STOP)
		elif THERMAL_THRESHOLD_LOW + THERMAL_HYSTERESIS < max_temperature \
				and max_temperature < THERMAL_THRESHOLD_HIGH + THERMAL_HYSTERESIS \
				and not currentFanSpeed == FAN_HALF:
			currentFanSpeed = FAN_HALF
			mcu_communicate(FAN_HALF)
		elif THERMAL_THRESHOLD_HIGH + THERMAL_HYSTERESIS < max_temperature \
				and not currentFanSpeed == FAN_FULL:
			currentFanSpeed = FAN_HALF
			mcu_communicate(FAN_FULL)
				
		time.sleep(10)

def poweroff():
	mcu_communicate(POWER_LED_FLASH)
	mcu_communicate(DEVICE_POWEROFF)




if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument('action', choices=['ready', 'fancontrol', 'poweroff'])
	args = parser.parse_args(sys.argv[1:])

	if args.action == 'ready':
		ready()

	if args.action == 'fancontrol':
		fancontrol()

	if args.action == 'poweroff':
		poweroff()



	
